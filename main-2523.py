# -*- coding: utf8 -*-
import classes

def guidelines():
    '''Κλάσεις που έχουν υλοποιηθεί:
        SakClass: Μοντελοποιεί το σακουλάκι και τα γράμματα που έχει κάθε στιγμή
            __init__: Κατασκευαστής που αρχικοποιεί το σακουλάκι με ένα ενσωματομένο λεξικό και το συνολικό αριθμό γραμμάτων που περιέχει
            calculateAmountOfLetters: Χρησιμοποιείται απο τον κατασκευαστή για την μέτρηση των γραμμάτων
            getLetters(n): Επιστρέφει μία λίστα με n γράμματα απο το σακουλάκι αφου πρώτα τα αφαιρέσει απο αυτό
            randomizeSak: Χρησιμοποιείται απο την παραπάνω για να επιλέξει τυχαια τα γράμματα
            putBackLetters(letter_list): Δέχεται μια λιστα απο γράμματα και τα τοποθετεί πίσω στο σακουλάκι
            checkAmount(n): Ελέγχει αν υπάρχουν τουλάχιστον n γράμματα στο σάκο
        Player: Κλάση απο την οποία κληρονομούν οι παίκτες
            __init__(sak): Αρχικοποιεί τις λιστες των γραμμάτων των παιχτών δίνοντας 7 γράμματα στον καθένα
            play(amount_of_letters): Τυπώνει στοιχεία όπως τα γράμματα και τους πόντους που τους αντιστοιχούν των παικτών είτε ειναι άνθρωπος ή Η/Υ
        Human(Player): Κληρονομεί απο την Player το πεδίο letters που είναι η λίστα των γραμμάτων που έχει στην διάθεση του ο παικτης
            __init__(sak): Καλεί τον κατασκευαστή της Player για να πάρει τα αρχικά γράμματα στο χέρι
            play(letter_sak): Δέχεται ως εισοδο απο τον χρηστη μία λέξη που αποτελείται απο τα γράμματα που έχει ή περνάει τη σειρά του ή σταματάει το παιχνίδι.
        Computer(Player): Ομόιως με την Human
            __init__(sak): Ομόιως με την Human
            play(letter_sak, dictionary, mode):Ανάλογα με τη τιμή του mode καλεί την αντίστοιχη μέθοδο παιξίματος και επιστρέφει μία δυάδα λέξης-τιμής
            Smart(letter_sak, dictionary): Δημιουργεί όλες τις μεταθέσεις γραμμάτων απο 2 μέχρι 7 γράμματα και αποθηκεύει σε μία λιστα δυάδων τις λέξεις με τις τιμές τους
            Fail(tuples_list): Δέχεται την λίστα που δημιουργήθηκε απο την Smart και ανάλογα με την δυσκολία που έχει επιλέξει ο χρήστης διαλέγει μία δυάδα και την επιστρέφει
        Game: Η κυρίως κλάση παιχνιδιού
            __init__: Αρχικοποιεί τις μεταβλητές που θα χρειαστούν και δημιουργεί το λεξικό είτε από το αρχείο greek7.txt ή από το json αρχείο που υπάρχει ήδη
            value(word): Χρησιμοποίεται απο τον κατασκευαστή για την ανάθεση τιμών στις λέξεις
            setup: Εμφανίζει στον χρήστη τις επιλογές που έχει και καλεί την κατάλληλη μέθοδο
            score: Διαβάζει το αρχείο json στο οποίο έχουν αποθηκευτεί οι προηγούμενες παρτίδες μαζί με ορισμένα στατιστικά
            settings: Επιτρέπει στον χρήστη να διαλέξει τη μέθοδο και δυσκολία του Η/Υ
            play: Ένας βρόχος που δίνει σειρά στους παίκτες μέχρι να πραγματοποιηθεί κάποια συνθήκη τερματισμού
            humanTurn: Καλεί την Human.play και δουλεύει ανάλογα με την είσοδο του χρήστη.
                       Αν πέρασε τη σειρά του ή εισήγαγε σωστή λέξη επιστρέφει με Τrue, αλλιώς τερματίζει το παιχνίδι ή περιμένει μία σωστή εντολή
            pcTurn: Καλεί την pc.play, εμφανίζει τη λέξη που έπαιξε ο Η/Υ, ενημερώνει τα γράμματα του Η/Υ και το σακουλάκι
            end: Aνακοινώνει τον νικητή του παιχνιδιού και αποθηκεύει στο αρχείο score τα στατιστικά
    Δομές Δεδομένων:
        Για τη δομή του λέξεων, χρησιμοποιείται ένα λεξικό που περιέχει τις λέξεις και τους πόντους.Έχω έτσι απόδοση O(1)
        για την εύρεση λέξεων από το λεξικό
    Αρχεία που απαιτούνται:
        main-2523.py Το κυρίως αρχείο
        classes.py Το αρχείο των κλάσσεων που έχουν υλοποιηθεί
        greek7.txt Απαιτείται για την πρώτη χρήση του προγράμματος, μετά διαβάζεται απευθειας το αρχείο dict.json
    '''

def main():
    g = classes.Game()
    g.setup()

main()
